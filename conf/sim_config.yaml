---
# NOTE: You must include units with all quantities that are not unitless. Units will be automatically converted to SI. 
# pod reference point: 
# - to bottom of frame: 82.5mm
# - from bottom of frame to bottom of he, mounted (no shims, so give or take a bit -- probably 1/10", or +~2.54mm): 62.4mm
# - from reference to bottom of HE = 82.5 + 62.4 + 2.54mm = 147.44 (reference to bottom of hover engines)
# - sensor_laser_opto: normal readings at 6mm height (?) were at about 18.3, +25mm built-in offset, so 43.3mm - 6mm = 37.3mm distance above bottom of HE (approx)
#     ref to bottom of he (147.44) - 37.3 = 110.14 (reference to bottom of laser opto sensor ** Remember to add in the built-in 25mm offset for calculations **)

sim:
    fixed_timestep: 5000 usec
    # Interval to recalculate time dialation (real time vs sim time) for the FCU timers
    time_dialation_interval: 100msec

    mission_profile:
        selected_profile: 0
        profiles:
          0:
            sAccel:
              AccelThresh_mm_ss: 30
              AccelThresh_x10ms: 30
              DecelThresh_mm_ss: 0
              DecelThresh_x10ms: 300
            sTime:
              Accel_Coast_x10ms: 200
              Coast_Brake_x10ms: 200
              Brake_Spindown_x10ms: 100

    fcu:
        # @todo: make this work
        enabled: True
        # DLL path relative to the top level of the simulator. Typically you would have eng-software-pod checked out in a sibling directory of this (eng-embed-sim)
        dll_path: "../eng-software-pod/APPLICATIONS/PROJECT_CODE/DLLS/LDLL174__RLOOP__LCCM655/bin/Debug/"  # Relative to top level of this repo (../)
        dll_filename: "LDLL174__RLOOP__LCCM655.dll"
        force_ready_state: True
        
    networking:
        # Use force_loopback to send and receive everything on 127.0.0.1
        force_loopback: True
        nodes:
            spacex:
                # @todo: get the correct values for where we need to send the spacex packet (ground station?)
                name: SpaceX Comms
                ip: 192.168.0.100            
                tx_port: 3000
                rx_port: 3000
                MAC: 00:26:80:01:00:00
                handler: SpacexNode
            flight_control: 
                name: Flight Control
                handler: FlightControlNode
                ip: 192.168.0.100
                tx_port: 9531
                rx_port: 9531
                MAC: 00:26:80:01:00:00
            sim_control:
                name: Python Simulator Control
                handler: PySimControlNode
                ip: 192.168.0.100
                tx_port: 9200
                rx_port: 9200
                MAC: 00:26:80:01:00:00
            #power_fwd: 
            #    name: Power FWD
            #    handler: PowerFwdNode
            #    ip: 192.168.0.110
            #    tx_port: 9110
            #    rx_port: 9110
            #    MAC: 00:26:80:01:00:01
            #power_aft:  
            #    name: Power AFT
            #    handler: PowerAftNode
            #    ip: 192.168.0.111
            #    tx_port: 9111
            #    rx_port: 9111
            #    MAC: 00:26:80:01:00:02
            #landing_gear:  
            #    name: Landing Gear
            #    handler: LandingGearNode
            #    ip: 192.168.0.120
            #    tx_port: 9120
            #    rx_port: 9120
            #    MAC: 00:26:80:01:00:03
            #gimbal_control:  
            #    name: Gimbal Control
            #    handler: GimbalControlNode
            #    ip: 192.168.0.130
            #    tx_port: 9130
            #    rx_port: 9130
            #    MAC: 00:26:80:01:00:04
                
    # Working directory for output files, relative to the cwd from which the simulator was run. Can be overridden by SimRunner.
    working_dir: data
    pusher:
        max_push_velocity: 100.0 m/s
        max_push_time: 2 s
        push_accel: 0.5 G
        brake_decel: -1 G
        
        push_end_position: 475 m  # NOTE: This is where the push will stop regardless of speed -- @todo: work this into the pusher
        #push_force: 8000 N  # @todo: remove this -- pusher is velocity controlled
        coast_duration: 300 ms  # @todo: rename this to pusher_coast_time and use it for the pusher position. It should be pretty small (find out from SpaceX?)
        #brake_force: -8000 N   # Doesn't really matter, just needs to be big and negative  # @todo: switch to using max_decel

    track:
        length: 1260 m
        pumpdown_pressure: .125 psi

        # Pressures to test: np.linspace(0.125, 12.5, 4)
        air_pressure: .125 psi
        air_temperature: 72.0
        air_specific_gas_constant: 287.05 J/(kg*degK)

        # Reflective strips
        # Enable/disable the reflective strips (e.g. an outdoor track will likely not have strips; the tube will)
        enable_reflective_strips: True
        # Enable/disable the 500' and 1000' strip patterns
        enable_strip_patterns: True
        reflective_strip_width: 4in
        reflective_pattern_interval: 100ft
        reflective_pattern_spacing: 4in

        # Track gaps
        track_gap_width: 5mm
        track_gap_interval: 2m
        
    sensors:
        
        # Various models of sensors (to avoid repeating ourselves. The code grabs the values as needed)
        models:
            optoNCDT_1320:
                # @see http://www.micro-epsilon.com/download/manuals/man--optoNCDT-1320--en.pdf, page 55 (p57 for behavior)
                # The sensor automatically subtracts 25mm from the output value before sending it out
                internal_offset: 25 mm
                # Raw value range from the sensor
                raw_min: 643
                raw_max: 64877
                # Actual physical values after conversion
                real_min: 0 mm
                real_max: 50 mm
                # Error indicator value: 65467 = ~50.459 mm
                error_value: 65467

            cm_distance:
                # @see http://www.noptel.fi/download/nms/manuals/CM3_CM5_APIGuide1_5.pdf, page 12
                pass: pass
                
        # A special 'sensor' for 'real' pod data (see sensor.py, PodSensor)
        pod:
            enabled: True
            log_filename: pod.csv
        pusher:
            enabled: True
            log_filename: pusher.csv

        accel:
            0:
                id: 0
                log_filename: accel_0.csv
                sampling_rate: 50 Hz
                raw_min: -8192
                raw_max: 8192
                real_min: -4 G
                real_max: 4 G
                # Note: scale of noise is in G force -- random distribution of 0.2gs, for instance
                noise: {enabled: True, scale: 0.02 G, center: 0.0}
#            1:
#                id: 1
#                log_filename: accel_1.csv
#                sampling_rate: 50 Hz
#                sampling_rate: 50 Hz
#                raw_min: -8192
#                raw_max: 8192
#                real_min: -4 G
#                real_max: 4 G
#                noise: {enabled: True, scale: 0.02 G, center: 0.0}
        laser_dist: 
            sampling_rate: 50 Hz
            # Maximum distance the sensor can see
            max_dist: 100m
            log_filename: laser_dist.csv
            noise:
                enabled: False
                scale: .0001
                center: 0.0
        laser_opto:
            # Height sensors
            # @see http://www.micro-epsilon.com/download/manuals/man--optoNCDT-1320--en.pdf, page 55
            # [0, 50] mm = [643, 64877] raw
            # Height measurements taken by Jonathan on 1/28/17 (@jrd7284, https://rloop.slack.com/archives/eng-syst/p1485615378002863)
                # Sensor 1 -> HE1 43.13mm
                # Sensor 2 -> HE4 40.25mm
                # Sensor3 ->  HE5 41.65mm
                # Sensor4 -> HE8 43.14mm
            0: 
                id: 1
                desc: Front Left
                model: optoNCDT_1320
                log_filename: laser_opto_0.csv
                he_height_offset: 43.13mm
                sampling_rate: 250 Hz
                noise:
                    enabled: False
                    scale: .0001
                    center: 0.0
            1: 
                id: 2
                desc: Rear Left
                model: optoNCDT_1320
                log_filename: laser_opto_1.csv
                he_height_offset: 40.25mm
                sampling_rate: 250 Hz
                noise:
                    enabled: False
                    scale: .0001
                    center: 0.0
            2: 
                id: 3
                desc: Rear Right
                model: optoNCDT_1320
                log_filename: laser_opto_2.csv
                he_height_offset: 41.65mm
                sampling_rate: 250 Hz
                noise:
                    enabled: False
                    scale: .0001
                    center: 0.0
            3: 
                id: 4
                desc: Front Right
                model: optoNCDT_1320
                log_filename: laser_opto_3.csv
                he_height_offset: 43.14mm
                sampling_rate: 250 Hz
                noise:
                    enabled: False
                    scale: .0001
                    center: 0.0

        laser_contrast:
            # Note: each entry in the following list represents a config for a laser contrast sensor
            # RDA: x offsets measured 1/19/2016
            0:
                id: 0
                log_filename: laser_contrast_0.csv
                pod_x_offset: -177 mm
                noise: {enabled: False, scale: 0.0, center: 0.0}
            1:
                id: 1
                log_filename: laser_contrast_1.csv
                pod_x_offset: -827 mm
                noise: {enabled: False, scale: 0.0, center: 0.0}
            2: 
                id: 2
                log_filename: laser_contrast_2.csv
                pod_x_offset: -1487 mm
                noise: {enabled: False, scale: 0.0, center: 0.0}

    pod:
        mass: 441 kg
        position: 0.0 m  # from start of track
        velocity: 0.0 m/s
        acceleration: 0.0 m/s^2
        forces:
            aero:
                # Put aero drag/lift force constants and configuration here
                # @see https://rloop.slack.com/archives/eng-numsim/p1483130166001034 and https://rloop.slack.com/archives/eng-numsim/p1483130642001039
                drag_area: 1.14 m^2
                drag_coefficient: 1.1849
                air_density: 0.100098 kg/m^3
            brakes:
                # Put brake drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
                gap: 2.5 mm
            gimbals:
                # Put gimbal drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
            hover_engines:
                # Put hover engine drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
                lift:
                    a: 1142
                    b: -99.144
                    c: 0.089501
                    k: 0.00932005
            landing_gear:
                # Put landing gear drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
            lateral_stability:
                # Put lateral stability drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
                damping_coefficient: 0.01 N*s/m  # 0.01 is a placeholder @todo: update to actual value
        landing_gear:
            # Heights relative to the bottoms of the hover engines
            min_height: 6mm
            max_height: 16mm
            initial_height: 6mm
            down_speed_loaded: something
            down_speed_unloaded: something
            up_speed_loaded: something
            down_speed_loaded: something
        sensors:

        actuators:
            lgu_actuators:  "Should be a list or something"
        physical:
            nose_tip_offset: 1.0m
            pusher_plate_offset: -2.9m
            # Distance that the pusher pin travels before registering disengagement
            # @todo: get an accurate measurement for this
            pusher_pin_travel: 5cm 
        hover_engines:
            # @see pod.py -- these are for a single hover engine drag based on velocity and height 
            mu_naught: 4 *pi 
            z_naught: 
            mag_dipole_strength:
            mag_permeability: 
            material_thickness: 0.5 in
            material_density: 
            # With this and velocity, we can get F_lift and F_drag? 
        brakes:
            0:
                # Note: we might want to set initial_gap here and use that to calculate initial screw position (and force it in the FCU).
                #       From then on, we would use the screw position to calculate gap
                # For use in vSTEPDRIVE_WIN32__ForcePosition and vSTEPDRIVE_WIN32__Set_UpdatePositionCallback

                # Initial brake gap -- note: the initial lead screw position will be calculated from this
                # Set the min and max values for the MLP. In theory this is 0-4096, but it's more like 300-3000 in practice.
                # Note that the raw min and raw max will be different per brake due to differences in MLP mounting
                id: 0
                gap:
                    initial_gap: 24.5mm
                    # Min and max gap correspond to the locations that the limit switches are triggered
                    extended_gap: 2.5mm
                    retracted_gap: 25.4mm
                    # Testing only
                    gap_close_min_time: 2.5s
                lead_screw:
                    # Physical points where the limit switches engage
                    # @todo: does the difference between these have to be the same for both brakes? We use this range to map the values, so we need a fixed difference...
                    limit_sw_retract: 310 um
                    limit_sw_extend: 71234 um

                    # Total range of the lead screw
                    range_min: 0 um
                    # @TODO: is this 75000 um (7.5cm) or 750000 um (75cm)?
                    range_max: 75000 um
                    # Efficiency of driving (torque from motor) and backdrive (linear force applied to lead screw creating load torque on motor)
                    # @see http://www.nookindustries.com/LinearLibraryItem/Ballscrew_Torque_Calculations
                    drive_efficiency: 0.90 
                    backdrive_efficiency: 0.80
                    # Screw characteristics
                    pitch: 4 mm
                # Linear position sensor
                mlp:
                    raw_min: 0
                    raw_max: 4096 
                    # MLP values when the limit switches are hit. 
                    limit_sw_retract: 300
                    limit_sw_extend:  3000
                negator:
                    # The physical pull cord that winds around the spool on the end of the motor to acutate the brakes in case of no power
                    torque: 0.7 N*m
            1:
                id: 1
                gap:
                    initial_gap: 24.5mm
                    # Min and max gap correspond to the locations that the limit switches are triggered
                    extended_gap: 2.5mm
                    retracted_gap: 25.4mm
                    # Testing only
                    gap_close_min_time: 2.5s
                lead_screw:
                    # Physical points where the limit switches engage
                    # @todo: does the difference between these have to be the same for both brakes? We use this range to map the values, so we need a fixed difference...
                    limit_sw_retract: 310 um
                    limit_sw_extend: 71234 um
                    # Total range of the lead screw
                    range_min: 0 um
                    range_max: 750000 um
                    # Efficiency of driving (torque from motor) and backdrive (linear force applied to lead screw creating load torque on motor)
                    # @see http://www.nookindustries.com/LinearLibraryItem/Ballscrew_Torque_Calculations
                    drive_efficiency: 0.90 
                    backdrive_efficiency: 0.80
                    # Screw characteristics
                    pitch: 4 mm
                # Linear position sensor
                mlp:
                    raw_min: 0
                    raw_max: 4096 
                    # MLP values when the limit switches are hit. 
                    limit_sw_retract: 300
                    limit_sw_extend:  3000
                # The negator is the physical pull cord that winds around the spool on the end of the motor to acutate the brakes in case of no power
                negator:
                    torque: 0.7 N*m

        
